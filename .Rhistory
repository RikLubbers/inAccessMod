cat(paste("\n\nEnter all the indices that correspond to the pillars that include the services you would like to focus.\nOn the same line separated by a space, or just skip to select all options.\n"))
selInd <- readline(prompt = "Selection: ")
selInd <- as.numeric(unlist(strsplit(x = selInd, split=" ")))
if (length(selInd) == 0){
selInd <- nCat
}
for (j in selInd){
message(paste("\nPillar: ", pillars[j]))
subVarCol <- varCol[grepl(paste0(j, "[0-9]{2}"), varCol)]
pillarServices <- NULL
for (k in 1:length(subVarCol)) {
pillarServices <- c(pillarServices, colnames(herTxtNames)[grep(paste0("^", subVarCol[k], "$"), herTxtNames[1, ])])
}
nCat <- 1:length(pillarServices)
indCat <- paste(paste0("\n", nCat, ": ", pillarServices))
cat(indCat)
cat(paste("\n\nEnter all the indices that correspond to the services you would like to focus.\nOn the same line separated by a space, or just skip to select all options.\n"))
selInd <- readline(prompt = "Selection: ")
selInd <- as.numeric(unlist(strsplit(x = selInd, split=" ")))
if (length(selInd) == 0){
selInd <- nCat
}
for (ind in selInd) {
subSubVarCol <- subVarCol[ind]
message(paste0("\n", colnames(herTxtNames)[grep(paste0("^", subSubVarCol, "$"), herTxtNames[1, ])]))
subSubVarCol <- subVarCol[ind]
newTib <- subsetting_process(tibT, tibC, subSubVarCol, impairValues = "A2|A3", stopQuest = FALSE)
tibT <- newTib[[1]]
tibC <- newTib[[2]]
}
}
}
}
}
newTib <- readxl::read_excel(pathTable, skip = 1, sheet = 2)
rr <- terra::rast("C:/inAccMod/tutorial/SWITZERLAND/data/rDEM/20220525122147/raw/srtm.tif")
rr <- terra::rast("C:/inAccMod/tutorial/SWITZERLAND/data/rDEM/20220602144321/raw/srtm.tif")
shp <- inAccMod::get_boundaries(mainPath, country, "raw")
mainPath <- "C:/inAccMod/tutorial"
country <- "Switzerland"
shp <- inAccMod::get_boundaries(mainPath, country, "raw")
rr <- terra::crop(rr, shp)
rr <- terra::mask(rr, as(shp, "SpatVector"))
terra::plot(rr)
pts <- dismo::randomPoints(raster::raster(rr), nrow(newTib))
newTib$external_id <- as.character(1:nrow(newTib))
newTib$workspace_id <- "Switzerland"
tid <- table(newTib$subject_id)
for (i in 1:length(tid)) {
tt <- tid[i]
newId <- do.call(paste0, Map(stringi::stri_rand_strings, n=1, length=c(2, 2, 1),
pattern = c('[A-Z]', '[0-9]', '[A-Z]')))
newTib[newTib$subject_id == names(tt), "subject_id"] <- rep(newId, tt)
}
newTib$MoSD1 <- NA
newTib[newTib$MoSD3 == "Garrison Infirmary", "MoSD3"] <- "Infirmary"
newTib[grepl("Inter", newTib$MoSD3), "MoSD3"] <- "Medical Center"
newTib[grepl("Community", newTib$MoSD3), "MoSD3"] <- "Polyclinic"
newTib[grepl("Reference", newTib$MoSD3), "MoSD3"] <- "Military Hospital"
tid <- table(newTib$HFNAME)
for (i in 1:length(tid)) {
tt <- tid[i]
newId <- gsub(",", "", randomNames::randomNames(1, ethnicity = 5))
newTib[newTib$HFNAME == names(tt), "HFNAME"] <- rep(newId, tt)
}
newTib$MoSD2 <- newTib$HFNAME
newTib$MoSD6 <- NA
newTib$MosD7a <- NA
newTib$GEO1 <- "Switzerland"
newTib$GEO3 <- NA
newTib$GEO5 <- NA
newTib$GEO6 <- NA
na_ind <- which(is.na(newTib$MoSDGPS_SQ001))
newTib$MoSDGPS_SQ001 <- pts[,2]
newTib$MoSDGPS_SQ002 <- pts[,1]
newTib$MoSDGPS_SQ002[44] <- 15
newTib[na_ind, c("MoSDGPS_SQ001","MoSDGPS_SQ002")] <- NA
newTib$MoSDPOP <- NA
newTib$HFCONTACT_NAME <- NA
newTib$HFCONTACT_FUNCT <- NA
newTib$HFCONTACT_PHONE <- NA
newTib$HFCONTACT_EMAIL <- NA
newTib
?usethis::use_data
newTibColNames <- readxl::read_excel(pathTable, skip = 0, sheet = 2)
fictitious_herams_data_txt <- newTib
newTibColNames
colnames(newTib) <- colnames(newTibColNames)
fictitious_herams_data_txt_colnames <- newTib
newTibCode <- readxl::read_excel(pathTable, skip = 1, sheet = 1)
newTib <- readxl::read_excel(pathTable, skip = 1, sheet = 2)
rr <- terra::rast("C:/inAccMod/tutorial/SWITZERLAND/data/rDEM/20220602144321/raw/srtm.tif")
shp <- inAccMod::get_boundaries(mainPath, country, "raw")
rr <- terra::crop(rr, shp)
rr <- terra::mask(rr, as(shp, "SpatVector"))
terra::plot(rr)
pts <- dismo::randomPoints(raster::raster(rr), nrow(newTib))
newTib$external_id <- as.character(1:nrow(newTib))
newTib$workspace_id <- "Switzerland"
tid <- table(newTib$subject_id)
for (i in 1:length(tid)) {
tt <- tid[i]
newId <- do.call(paste0, Map(stringi::stri_rand_strings, n=1, length=c(2, 2, 1),
pattern = c('[A-Z]', '[0-9]', '[A-Z]')))
newTib[newTib$subject_id == names(tt), "subject_id"] <- rep(newId, tt)
}
newTib$MoSD1 <- NA
newTib[newTib$MoSD3 == "Garrison Infirmary", "MoSD3"] <- "Infirmary"
newTib[grepl("Inter", newTib$MoSD3), "MoSD3"] <- "Medical Center"
newTib[grepl("Community", newTib$MoSD3), "MoSD3"] <- "Polyclinic"
newTib[grepl("Reference", newTib$MoSD3), "MoSD3"] <- "Military Hospital"
tid <- table(newTib$HFNAME)
for (i in 1:length(tid)) {
tt <- tid[i]
newId <- gsub(",", "", randomNames::randomNames(1, ethnicity = 5))
newTib[newTib$HFNAME == names(tt), "HFNAME"] <- rep(newId, tt)
}
newTib$MoSD2 <- newTib$HFNAME
newTib$MoSD6 <- NA
newTib$MosD7a <- NA
newTib$GEO1 <- "Switzerland"
newTib$GEO3 <- NA
newTib$GEO5 <- NA
newTib$GEO6 <- NA
na_ind <- which(is.na(newTib$MoSDGPS_SQ001))
newTib$MoSDGPS_SQ001 <- pts[,2]
newTib$MoSDGPS_SQ002 <- pts[,1]
newTib$MoSDGPS_SQ002[44] <- 15
newTib[na_ind, c("MoSDGPS_SQ001","MoSDGPS_SQ002")] <- NA
newTib$MoSDPOP <- NA
newTib$HFCONTACT_NAME <- NA
newTib$HFCONTACT_FUNCT <- NA
newTib$HFCONTACT_PHONE <- NA
newTib$HFCONTACT_EMAIL <- NA
newTib
fictitious_herams_data_txt <- newTib
newTibCode <- readxl::read_excel(pathTable, skip = 1, sheet = 1)
newTibCode[, c("external_id",
"workspace_id",
"subject_id",
"MoSD1",
"MoSD3",
"HFNAME",
"MoSD2",
"MoSD6",
"MosD7a",
"GEO1",
"GEO3",
"GEO5",
"GEO6",
"MoSDGPS_SQ001",
"MoSDGPS_SQ002",
"MoSDPOP",
"HFCONTACT_NAME",
"HFCONTACT_FUNCT",
"HFCONTACT_PHONE",
"HFCONTACT_EMAIL")]
newTibCode[, c("external_id",
"workspace_id",
"subject_id",
"MoSD1",
"MoSD3",
"HFNAME",
"MoSD2",
"MoSD6",
"MosD7a",
"GEO1",
"GEO3",
"GEO5",
"GEO6",
"MoSDGPS_SQ001",
"MoSDGPS_SQ002",
"MoSDPOP",
"HFCONTACT_NAME",
"HFCONTACT_FUNCT",
"HFCONTACT_PHONE",
"HFCONTACT_EMAIL")] <- newTib[, c("external_id",
"workspace_id",
"subject_id",
"MoSD1",
"MoSD3",
"HFNAME",
"MoSD2",
"MoSD6",
"MosD7a",
"GEO1",
"GEO3",
"GEO5",
"GEO6",
"MoSDGPS_SQ001",
"MoSDGPS_SQ002",
"MoSDPOP",
"HFCONTACT_NAME",
"HFCONTACT_FUNCT",
"HFCONTACT_PHONE",
"HFCONTACT_EMAIL")]
newTibCode
fictitious_herams_data_txt <- newTib
fictitious_herams_data_code <- newTibCode
newTibColNames <- readxl::read_excel(pathTable, skip = 0, sheet = 2)
colnames(newTib) <- colnames(newTibColNames)
fictitious_herams_data_txt_colnames <- newTib
fictitious_herams_data_txt
fictitious_herams_data_code
fictitious_herams_data_txt_colnames
usethis::use_data(fictitious_herams_data_txt, overwrite = TRUE)
usethis::use_data(fictitious_herams_data_code, overwrite = TRUE)
usethis::use_data(fictitious_herams_data_txt_colnames, overwrite = TRUE)
# Check same order
all(herCode$external_id == herTxt$external_id & herTxt$external_id == herTxtNames$`External ID`)
# Check same order
all(herCode$external_id == herTxt$external_id) & all(herTxt$external_id == herTxtNames$`External ID`)
all(herCode$external_id == herTxt$external_id)
all(herTxt$external_id == herTxtNames$`External ID`)
herTxtNames$`External ID`
herTxtNames <- inAccMod::fictitious_herams_data_txt_colnames
herTxt <- tryCatch({readxl::read_excel(pathTable, skip = 1, sheet = 2, trim_ws = FALSE)}, error = function(e){NULL})
herCode <- tryCatch({readxl::read_excel(pathTable, skip = 1, sheet = 1, trim_ws = FALSE)}, error = function(e){NULL})
# To get the name of the services (we don't skip the first row)
herTxtNames <- tryCatch({readxl::read_excel(pathTable, skip = 0, sheet = 2, trim_ws = FALSE)}, error = function(e){NULL})
# Check same order
all(herCode$external_id == herTxt$external_id) & all(herTxt$external_id == herTxtNames$`External ID`)
all(herCode$external_id == herTxt$external_id)
all(herTxt$external_id == herTxtNames$`External ID`)
herTxt$external_id
herTxtNames$`External ID`
# Check same order
all(herCode$external_id == herTxt$external_id) & all(herTxt$external_id == herTxtNames$`External ID`[-1])
paste("oioi", collapse = "+")
paste(c("oioi", "lkl"), collapse = "+")
#' @param tibC \code{tibble} object; HeRAMS table with codes.
#' @param varCol character; column name for filtering.
#' @param impairValues character; values that indicate that there is an impairment (e.g., service partially available).
#' Has to be compatible with regular expression (regex).
#' @param stopQuest logical; is it possible that the questionnaire is stopped at the specified column ?
#' @param codeName character; name of the column as it its indicated in the column code and stop lists.
#' @param stopLst list; list with the values for different attributes that stops the questionnaire.
#' @param tempDir character; temporary folder.
#' @return a list of two \code{tibble} objects; The updated tibbles, the one with labels and the other one with codes.
#' @export
HeRAMS_table_subset <- function (tibT, tibC, varCol, stopQuest = TRUE, codeName = NULL, stopLst = NULL, tempDir, barriers, suffix, impairmentValues) {
categories <- unique(tibT[, varCol, drop = TRUE])
selInd <- select_hf_classes(categories, "Select the values that you would like to keep")
if (is.null(selInd)) {
categories <- categories
} else {
categories <- categories[selInd]
}
# If selInd is equal to the length of categories + 1
if (length(categories) == 1) {
if (is.na(categories)) {
unlink(tempDir)
stop_quietly("You canceled the filtering process.")
}
}
tibC <- tibC[tibT[, varCol, drop = TRUE] %in% categories, ]
tibT <- tibT[tibT[, varCol, drop = TRUE] %in% categories, ]
write(paste0(varCol, ": ", paste(categories, collapse = " + ")), file = paste(tempDir, "selected_hf.txt", sep = "/"), append = TRUE)
# Check if stop
if (stopQuest) {
if (codeName %in% names(stopLst)) {
if (all(tibC[tibT[, varCol, drop = TRUE] %in% categories, varCol, drop = TRUE] == stopLst[[codeName]])) {
print("STOP")
return(list(tibT, tibC))
}
}
}
# Check if they are possible barriers
colBarriers <- colnames(tibT)[grep(paste0(varCol, codeColumns$Barrier_suffix), colnames(tibT))]
if (length(colBarriers) == 0) {
return(list(tibT, tibC))
} else {
impair <- grepl(impairmentValues, tibC[, varCol, drop = TRUE])
if (any(impair) & barriers){
# Get possible responses
resps <- NULL
for (j in 1:length(colBarriers)) {
resp <- tibT[, colBarriers[j], drop = TRUE]
resp <- resp[complete.cases(resp)]
resps <- c(resps, resp)
}
categories <- unique(resps)
selInd <- select_hf_classes(categories, "Select the values that you would like to keep")
if (is.null(selInd)) {
categories <- categories
} else {
categories <- categories[selInd]
}
# As there are different columns that can contain the value
condMat1 <- matrix(NA, nrow = nrow(tibT), ncol = length(colBarriers))
for (j in 1:length(colBarriers)) {
condMat2 <- matrix(NA, nrow = nrow(tibT), ncol = length(categories))
for (k in 1:length(categories)) {
condMat2[, k] <- categories[k] == tibT[, colBarriers[j], drop = TRUE]
}
condMat1[, j] <- apply(condMat2, 1, any)
}
tibC <- tibC[apply(condMat1, 1, any, na.rm = TRUE), ]
tibT <- tibT[apply(condMat1, 1, any, na.rm = TRUE), ]
write(paste0(varCol, "_x", ": ", paste(categories, collapse = " + ")), file = paste(tempDir, "selected_hf.txt", sep = "/"), append = TRUE)
}
}
return(list(tibT, tibC))
}
codeColumns$Barrier_suffix
strsplit("hel + sd")
strsplit("hel + sd", " [+] ")
unlist(strsplit("hel + sd", " [+] "))
unlist(strsplit("hel + sd (kdj)", " [+] "))
cols
colnames(tibTxt)
colN <- "QHeRAMS104x"
paste0("^", colN, "$")
grepl(paste0("^", colN, "$"), names(codeColumns))
grepl(paste0("^", colN, "$"), cols)
grepl(paste0("^", colN, codeColumns$Barrier_suffix, "$"), cols)
paste0("^", colN, codeColumns$Barrier_suffix, "$")
substr(codeColumns$Barrier_suffix, 2, nchar(codeColumns$Barrier_suffix))
# As we only kept the first character of the suffix in the txt file
grepl(paste0("^", colN, substr(codeColumns$Barrier_suffix, 2, nchar(codeColumns$Barrier_suffix)), "$"), cols)
grepl(paste0("^", colN, "$"), cols)
!any(cond1)
cond1 <- grepl(paste0("^", colN, "$"), cols)
!any(cond1)
cond2 <- grepl(paste0("^", colN, substr(codeColumns$Barrier_suffix, 2, nchar(codeColumns$Barrier_suffix)), "$"), cols)
condMat1 <- matrix(NA, nrow = nrow(tibTxt), ncol = sum(cond2))
condMat1
cont <- c(NA, "Available")
condMat2 <- matrix(NA, nrow = nrow(tibTxt), ncol = length(cont))
condMat2
which(cond2)
sum(cond2)
c("kj") == c("kj", "lklk", "popo")
devtools::load_all(".")
rm(HeRAMS_table_subset
)
rm(set_HeRAMS_stop)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
tibTxt <- inAccMod::fictitious_herams_data_txt
tibCode <- inAccMod::fictitious_herams_data_code
tibTxtNames <- inAccMod::fictitious_herams_data_txt_colnames
tibTxtNames
tibCode
tibTxt
all(tibCode$external_id == tibTxt$external_id)
all(tibTxt$external_id == tibTxtNames$`External ID`[-1])
tibTxt$external_id == tibTxtNames$`External ID`[-1]
tibTxtNames$`External ID`
tibTxt$external_id
tibTxtNames$`External ID`
newTib <- readxl::read_excel(pathTable, skip = 1, sheet = 2)
rr <- terra::rast("C:/inAccMod/tutorial/SWITZERLAND/data/rDEM/20220602144321/raw/srtm.tif")
shp <- inAccMod::get_boundaries(mainPath, country, "raw")
rr <- terra::crop(rr, shp)
rr <- terra::mask(rr, as(shp, "SpatVector"))
terra::plot(rr)
pts <- dismo::randomPoints(raster::raster(rr), nrow(newTib))
newTib$external_id <- as.character(1:nrow(newTib))
newTib$workspace_id <- "Switzerland"
tid <- table(newTib$subject_id)
for (i in 1:length(tid)) {
tt <- tid[i]
newId <- do.call(paste0, Map(stringi::stri_rand_strings, n=1, length=c(2, 2, 1),
pattern = c('[A-Z]', '[0-9]', '[A-Z]')))
newTib[newTib$subject_id == names(tt), "subject_id"] <- rep(newId, tt)
}
newTib$MoSD1 <- NA
newTib[newTib$MoSD3 == "Garrison Infirmary", "MoSD3"] <- "Infirmary"
newTib[grepl("Inter", newTib$MoSD3), "MoSD3"] <- "Medical Center"
newTib[grepl("Community", newTib$MoSD3), "MoSD3"] <- "Polyclinic"
newTib[grepl("Reference", newTib$MoSD3), "MoSD3"] <- "Military Hospital"
tid <- table(newTib$HFNAME)
for (i in 1:length(tid)) {
tt <- tid[i]
newId <- gsub(",", "", randomNames::randomNames(1, ethnicity = 5))
newTib[newTib$HFNAME == names(tt), "HFNAME"] <- rep(newId, tt)
}
newTib$MoSD2 <- newTib$HFNAME
newTib$MoSD6 <- NA
newTib$MosD7a <- NA
newTib$GEO1 <- "Switzerland"
newTib$GEO3 <- NA
newTib$GEO5 <- NA
newTib$GEO6 <- NA
na_ind <- which(is.na(newTib$MoSDGPS_SQ001))
newTib$MoSDGPS_SQ001 <- pts[,2]
newTib$MoSDGPS_SQ002 <- pts[,1]
newTib$MoSDGPS_SQ002[44] <- 15
newTib[na_ind, c("MoSDGPS_SQ001","MoSDGPS_SQ002")] <- NA
newTib$MoSDPOP <- NA
newTib$HFCONTACT_NAME <- NA
newTib$HFCONTACT_FUNCT <- NA
newTib$HFCONTACT_PHONE <- NA
newTib$HFCONTACT_EMAIL <- NA
newTib
fictitious_herams_data_txt <- newTib
newTibCode <- readxl::read_excel(pathTable, skip = 1, sheet = 1)
newTibCode[, c("external_id",
"workspace_id",
"subject_id",
"MoSD1",
"MoSD3",
"HFNAME",
"MoSD2",
"MoSD6",
"MosD7a",
"GEO1",
"GEO3",
"GEO5",
"GEO6",
"MoSDGPS_SQ001",
"MoSDGPS_SQ002",
"MoSDPOP",
"HFCONTACT_NAME",
"HFCONTACT_FUNCT",
"HFCONTACT_PHONE",
"HFCONTACT_EMAIL")] <- newTib[, c("external_id",
"workspace_id",
"subject_id",
"MoSD1",
"MoSD3",
"HFNAME",
"MoSD2",
"MoSD6",
"MosD7a",
"GEO1",
"GEO3",
"GEO5",
"GEO6",
"MoSDGPS_SQ001",
"MoSDGPS_SQ002",
"MoSDPOP",
"HFCONTACT_NAME",
"HFCONTACT_FUNCT",
"HFCONTACT_PHONE",
"HFCONTACT_EMAIL")]
fictitious_herams_data_code <- newTibCode
newTibColNames <- readxl::read_excel(pathTable, skip = 0, sheet = 2)
newTib <- rbind(colnames(newTib), newTib)
newTib
colnames(newTib) <- colnames(newTibColNames)
newTib
fictitious_herams_data_txt_colnames <- newTib
usethis::use_data(fictitious_herams_data_txt, overwrite = TRUE)
usethis::use_data(fictitious_herams_data_code, overwrite = TRUE)
usethis::use_data(fictitious_herams_data_txt_colnames, overwrite = TRUE)
devtools::load_all(".")
tibTxt <- inAccMod::fictitious_herams_data_txt
tibCode <- inAccMod::fictitious_herams_data_code
tibTxtNames <- inAccMod::fictitious_herams_data_txt_colnames
tibTxtNames$`External ID`
# Check same order
matchRows <- all(tibCode$external_id == tibTxt$external_id) & all(tibTxt$external_id == tibTxtNames$`External ID`[-1])
matchRows
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
c("kj","kj")[3]
c("kj","kj")[1:3]
is.na("lk","lk")
complete.cases(c("kj","Lk"))
complete.cases(c("kj",NA))
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
grepl("inc: lkd", "inc: lkd")
stringr::str_extract("asd -> ", "^.* -> ")
colN <- stringr::str_extract("asd -> ", "^.* -> ")
colN <- gsub(" -> ", "", colN)
colN
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = "001", mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = "001", mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = "001", mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
categories[!complete.cases(categories)]
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
tibTxt <- inAccMod::fictitious_herams_data_txt
tibTxt$QHeRAMS102
tibTxt$QHeRAMS102[1:26, ]
tibTxt$QHeRAMS102[1:26]
aa <- tibTxt$QHeRAMS102[1:26]
unique(aa)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
devtools::load_all(".")
filter_hf_3(mainPath, country, pathTable = NULL, scenario = NULL, mostRecentObs = NULL, barriers = TRUE)
