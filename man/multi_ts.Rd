% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi_ts.R
\name{multi_ts}
\alias{multi_ts}
\title{Multiple travel scenarios}
\usage{
multi_ts(inputFolder, adminLayerName, landcoverFile, zones_ts = NULL)
}
\arguments{
\item{inputFolder}{character; the path to the input folder, which must contains an administrative unit shapefile, a merged 
landcover imported from AccessMod and an Excel or CSV table for each travel scenario.}

\item{adminLayerName}{character; the name of the administrative unit layer (without extension)}

\item{landcoverFile}{character; the file name of the original merged landcover (with extension)}

\item{zones_ts}{character; Excel or CSV table that relates the administrative units to the different scenarios. Two columns:
the first one has the same name than the field name of the administrative layer attribute table that refers to each administrative
unit, and the second one called 'scenario'. In the first all the different units (as indicated in the attribute table), in the second,
the names (without the extension) of the different scenario tables. If set to NULL, the user is interactively asked to assign
a scenario to each administrative unit, and a zones_ts table is created.}
}
\description{
Function that allows to handle different travel scenarios for different administrative units. It creates an updated 
merged landcover and an updated travel scenario table. The required inputs are an administrative shapefile, a merged landcover
imported from AccessMod, and an Excel (or CSV) table for each travel scenario. The function requires a folder that only
contains the required inputs. When running the function, the user is asked to select the attribute table column of 
the shapefile that refers to each administrative unit, and then to select the travel scenario for each administrative unit.
}
\details{
An output folder called out is created within the input folder, as well as a subfolder whose name 
is based on the system time that contains three outputs (e.g. ./out/20220826104842):
\itemize{
\item The updated landcover raster
\item The updated travel scenario table
\item A table that relates the different administrative units to the different travel scenarios
}
The function works are the following:
\itemize{
\item Check of the tables that are in the input folder: missing data, column names, values available for all landcover classes, values for the "mode" column, only one value per class, and speed in numerical format and positive or equal to zero.
\item Console printing of the shapefile attribute table, and selection of the column used to determine the administrative unit. 
\item Interactive selection of the scenario (based on the table names) for each administrative unit, and creation of a table that relates the units and the scenarios, or loading this table if indicated.
\item Loop over each administrative unit
\itemize{
\item Copy of the corresponding travel scenario table
\item Reclassification (sequentially, taking into account the last value assigned for the scenario of the previous unit)
\item Append the administrative unit name (or code) to the classes' labels
\item Landcover raster clip and reclassification of the raster values (consistent with the previous reclassification)
\item Save the new raster (in a temporary directory), save the new table (in a list)
}
\item Merging of the rasters of each unit (in case of overlap, the values get priority in the same order as the arguments), and merging of the tables of each unit.
\item Writing the final raster, the final table, and the table that relates the different administrative units and the different travel scenarios. The final number of classes are N-classes x N-units.
}
}
